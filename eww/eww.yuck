;; ** Variables ***********************************************************************
;; all the deffpolls

(defpoll    year                :interval "10h" `date +%Y`)
(defpoll    month               :interval "10m" `date +%m`)
(defpoll    day                 :interval "5m"  `date +%d`)
(defpoll    hour                :interval "5s"  `date '+%H'`)
(defpoll    min                 :interval "5s"  `date '+%M'`)
(defpoll    wifi_icon           :interval "5s"  `scripts/wifi icon`)
(defpoll    wifi_ssid           :interval "5s"  `scripts/wifi ssid`)
(defpoll    bluetooth_icon      :interval "3s"  `scripts/bt icon`)
(defpoll    bluetooth_connected :interval "3s"  `scripts/bt connected`)
(defpoll    VOLUME              :interval "1s"  `scripts/vol`)
(defvar bt_headset "")
(defvar usb_devices "[]")
(defvar reveal_mail false)
(defvar reveal_wifi false)

(defvar icons '{"Alacritty":                "",
                "imv":                      "",
                "firefox":                  "",
                "libreoffice-writer":       "",
                "libreoffice-calc":         "",
                "mpv":                      "󰨜",
                "org.keepassxc.KeePassXC":  "󰯅",
                "org.pwmt.zathura":         "",
                "Neovim":                   "",
                "simple-scan":              "󰚫",
                "org.telegram.desktop":     "",
                "virt-manager":             "",
                "zoom":                     "󰰸",
                "Yandex-browser":           "",
                "None":                     ""}')
;;defwidgets******************************************************************

(defwidget bar []
	(centerbox :class "cbox"
    (left)
    (center)
    (right)
))

(defwidget left []
	(box :orientation "h" 
    :space-evenly false  
    :halign "start"
    :valign "start"
    :class "modules"
    (power)
    (sysinfo)
))

(defwidget center []
	(box :orientation "h" 
    :space-evenly false  
    :halign "center"
    :valign "center"
    :class "modules"
    ;(workspaces)
    (wss)
))

(defwidget right []
	(box :orientation "h"
    :space-evenly false
    :halign "end"
    :class "modules"
    (usb)
    (headset)
    (mail)
    (bt)
    (wifi)
    (volume)
    (clock)
))

(defwidget sep []
  (box
    :class "sep"
    :vexpand false
    :hexpand false
    :space-evenly true
    (label :class "sep" :text "|")))

(defwidget sysinfo []
  (box :class "sysinfo" :orientation "h" :space-evenly false :halign "start"
    (box :class "meminfo" :orientation "h" :space-evenly false :halign "start"
        (button :timeout "1s" :class "hover txt"
        :onclick `hyprctl dispatch exec "alacritty --class btm,btm -e btm --config ~/.config/bottom/mem.toml"`
        (box :class "mem-box-inner" :space-evenly false :spacing 3
          (label :text " ")
          (label :limit-width 4 :show-truncated false :text "${EWW_RAM.used_mem/1024/1024/1024}")
          (label :text "GB"))))
    (sep)
    (box :class "cpuinfo" :orientation "h" :space-evenly false :halign "start"
        (button :timeout "1s" :class "hover txt"
        :onclick `hyprctl dispatch exec "alacritty --class btm,btm -e btm --config ~/.config/bottom/cpu.toml"`
        (box :class "cpu-box-inner" :space-evenly false :spacing 3
          (label :text "󰻠 ")
          (label :limit-width 4 :show-truncated false :text "${EWW_CPU.avg}")
          (label :text "%"))))
))

(defvar reveal_pow false)
(defwidget power []
  (box :class "power"
       :space-evenly false
       :halign "start"
    (hover-power :vara reveal_pow :varname "reveal_pow" :icon "")
))
(defwidget hover-power [vara varname icon ?class]
  (box :space-evenly false
       :class "hover-power ${class}"
    (revealer-on-hover :var vara
                       :varname "${varname}"
                       :icon icon
                       :transition "slideleft"
      (button :class "hover txt glyph" :onclick "systemctl poweroff" :tooltip "Poweroff"      "")
      (box :space-evenly true
        (button :class "hover txt glyph" :onclick "systemctl suspend"  :tooltip "Suspend"     "")
        (button :class "hover txt glyph" :onclick "systemctl reboot"   :tooltip "Reboot"      "󰑓")
        (button :class "hover txt glyph" :onclick "hyprctl dispatch exit 0" :tooltip "logoff" "󰍃"))
      (sep)
)))

(defvar reveal_vol false)
;(defvar reveal_mic false)
(defwidget volume []
  (box :class "volume"
       :space-evenly false
       :halign "end"
    (hover-volume :vara reveal_vol :varname "reveal_vol" :icon "")
    ;(hover-module :vara reveal_mic :varname "reveal_mic" :icon "")
))

(defwidget hover-volume [vara varname icon ?class]
  (box :space-evenly false
       :class "hover-volume ${class}"
    (revealer-on-hover :var vara
                       :varname "${varname}"
                       :icon icon
                       :transition "slideleft"
      (label :class "txt glyph" :text icon)
      (scale 
             :value VOLUME 
             ;:tooltip "${VOLUME}%"
             :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}%"
             :max 100
             :min 0
             )
      (label :class "txt" :text "${VOLUME}%")
    )(sep)))

(defwidget revealer-on-hover [var varname ?class ?duration ?transition]
  (box :class "${class} revealer-on-hover"
       :orientation "h"
       :space-evenly false
    (eventbox :class "eventbox"
              :onhover "eww update ${varname}=true"
              :onhoverlost "eww update ${varname}=false"
      (box :space-evenly false
        (children :nth 0)
        (revealer 
                  :reveal var
                  :transition {transition ?: "slideright"}
                  :duration {duration ?: "500ms"}
          (children :nth 1))

        (children :nth 2)
        ))))

(defwidget headset [] 
  (box :class "headset"
    :orientation "h"
    :visible { strlength(bt_headset) > 0}
    :space-evenly false
    :halign "end"
      (button :class "hover txt glyph" :timeout "1s" :onclick "scripts/headset toggle" 
        { bt_headset.profile == "a2dp-sink" ? "󰋋" : "󰋎"}
      )
      (sep)
))
(defwidget usb [] 
  (box :class "usb"
    :orientation "h"
    :space-evenly false
    :halign "end"
    :visible { arraylength(usb_devices) > 0 }
    (for usb_device in usb_devices
    (box 
      :orientation "h"
      :space-evenly false
      :halign "end"
      (button :class "hover txt glyph" :timeout "1s"
      :onclick "udisksctl unmount -b ${usb_device} && udisksctl power-off -b ${usb_device}" "")
      (sep)))
))

(deflisten mail_counter "scripts/mail")
(defwidget mail [] 
  (box :class "mail"
    :orientation "h"
    :space-evenly false
    :halign "end"
    (revealer 
              :reveal { mail_counter > 0 }
              :transition "slideright"
              :duration "500ms"
      (box :class "mail-box" 
        :orientation "h"
        :space-evenly false
        :halign "end"
        (label :class "txt glyph" :text "")
        (label :class "txt" :text "${mail_counter}")(sep)))
))

(defwidget wifi []
  (box :class "wifi"
    :orientation "h"
    :space-evenly false
    :halign "center"
    (revealer-on-hover :var reveal_wifi
        :varname "reveal_wifi"
        :icon "${wifi_icon}"
        :transition "slideleft"
        (button :class "hover txt glyph" :timeout "1s" :onclick "scripts/wifi toggle" "${wifi_icon}")
        (label :class "ssid" :text "${wifi_ssid}")
    )(sep)))

(defwidget bt []
  (box :class "bt"
    :orientation "h"
    :space-evenly false
    :halign "end"
    (button :class "hover txt " :timeout "1s"
    :onclick "scripts/bt toggle" "${bluetooth_icon}")
    (sep)
    ))

(defwidget clock []
  (box 
    :orientation "h"
    :space-evenly false
    :halign "end"
    (box :class "clock-box"
      :orientation "h"
      :space-evenly false
      :halign "end"
      (label :class "txt glyph" :text "󰅐")
      (label :class "txt" :text "${hour}:${min}"))
    (sep)
    
    (box :class "calendar-box" :orientation "h" :space-evenly false :halign "start"
     (button :class "hover txt clock" 
             :timeout "1s" 
             :onclick "sleep 0.1 && eww open --toggle calendar" 
             " ${day}.${month}"))
))

(deflisten wss_json "scripts/wss")
(defwidget wss [] 
  (box :class "wss" :space-evenly false
    (box :space-evenly false 
    (for ws in wss_json
      (box :space-evenly false 
        (label :class "inactive" :text "•")
        (button :class { ws.active ? "txt glyph" : "hover inactive glyph"} 
              :timeout "1s"
              :onclick "hyprctl dispatch workspace ${ws.id}"
              "${ icons[ws.class] != "null" ? icons[ws.class] : "?" }"))))
     (label :class "inactive" :text "•")
))

(defwidget calendar_widget []
  (box
    :class "calendar_widget"
    :orientation "h"
    :valign "fill"
    :halign "fill"
    (calendar
      :day day
      :year year
      :show-details "true"
      :show-heading "true"
      :show-day-names "true")))
;; windows ****************************************

(defwindow bar
  :exclusive true
  :monitor 0
  :stacking "bg"
	:focusable false
  :geometry (geometry :x "0"
                      :y "0"
                      :width "1910px"
                      :height "10px"
                      :anchor "top center")
  (bar))
(defwindow calendar
  :monitor 0
  :stacking "fg"
  :geometry (geometry :x "5px" 
                      :y "5px"
                      :width "400px"
                      :height "100px"
                      :anchor "top right")
  (calendar_widget))

